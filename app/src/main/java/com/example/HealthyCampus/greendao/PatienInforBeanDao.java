package com.example.HealthyCampus.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.HealthyCampus.greendao.model.PatienInforBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PatienInforBean".
*/
public class PatienInforBeanDao extends AbstractDao<PatienInforBean, Long> {

    public static final String TABLENAME = "PatienInforBean";

    /**
     * Properties of entity PatienInforBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Card_id = new Property(2, String.class, "card_id", false, "CARD_ID");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Weight = new Property(5, String.class, "weight", false, "WEIGHT");
        public final static Property Allergy = new Property(6, String.class, "allergy", false, "ALLERGY");
        public final static Property History = new Property(7, String.class, "history", false, "HISTORY");
        public final static Property Liver = new Property(8, String.class, "liver", false, "LIVER");
        public final static Property Kidney = new Property(9, String.class, "kidney", false, "KIDNEY");
    }


    public PatienInforBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PatienInforBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PatienInforBean\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"CARD_ID\" TEXT," + // 2: card_id
                "\"SEX\" TEXT," + // 3: sex
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"WEIGHT\" TEXT," + // 5: weight
                "\"ALLERGY\" TEXT," + // 6: allergy
                "\"HISTORY\" TEXT," + // 7: history
                "\"LIVER\" TEXT," + // 8: liver
                "\"KIDNEY\" TEXT);"); // 9: kidney
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PatienInforBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatienInforBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String card_id = entity.getCard_id();
        if (card_id != null) {
            stmt.bindString(3, card_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(6, weight);
        }
 
        String allergy = entity.getAllergy();
        if (allergy != null) {
            stmt.bindString(7, allergy);
        }
 
        String history = entity.getHistory();
        if (history != null) {
            stmt.bindString(8, history);
        }
 
        String liver = entity.getLiver();
        if (liver != null) {
            stmt.bindString(9, liver);
        }
 
        String kidney = entity.getKidney();
        if (kidney != null) {
            stmt.bindString(10, kidney);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatienInforBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String card_id = entity.getCard_id();
        if (card_id != null) {
            stmt.bindString(3, card_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(6, weight);
        }
 
        String allergy = entity.getAllergy();
        if (allergy != null) {
            stmt.bindString(7, allergy);
        }
 
        String history = entity.getHistory();
        if (history != null) {
            stmt.bindString(8, history);
        }
 
        String liver = entity.getLiver();
        if (liver != null) {
            stmt.bindString(9, liver);
        }
 
        String kidney = entity.getKidney();
        if (kidney != null) {
            stmt.bindString(10, kidney);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatienInforBean readEntity(Cursor cursor, int offset) {
        PatienInforBean entity = new PatienInforBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // card_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // weight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // allergy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // history
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // liver
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // kidney
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatienInforBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCard_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeight(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAllergy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHistory(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLiver(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKidney(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatienInforBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatienInforBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatienInforBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
