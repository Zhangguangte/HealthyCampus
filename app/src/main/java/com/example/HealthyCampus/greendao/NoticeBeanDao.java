package com.example.HealthyCampus.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.HealthyCampus.greendao.model.NoticeBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NOTICE_BEAN".
*/
public class NoticeBeanDao extends AbstractDao<NoticeBean, Long> {

    public static final String TABLENAME = "NOTICE_BEAN";

    /**
     * Properties of entity NoticeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property NoticeType = new Property(4, String.class, "noticeType", false, "NOTICE_TYPE");
        public final static Property N_id = new Property(5, String.class, "n_id", false, "N_ID");
    }


    public NoticeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" TEXT," + // 1: create_time
                "\"CONTENT\" TEXT," + // 2: content
                "\"STATUS\" TEXT," + // 3: status
                "\"NOTICE_TYPE\" TEXT," + // 4: noticeType
                "\"N_ID\" TEXT);"); // 5: n_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoticeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(2, create_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String noticeType = entity.getNoticeType();
        if (noticeType != null) {
            stmt.bindString(5, noticeType);
        }
 
        String n_id = entity.getN_id();
        if (n_id != null) {
            stmt.bindString(6, n_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoticeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(2, create_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String noticeType = entity.getNoticeType();
        if (noticeType != null) {
            stmt.bindString(5, noticeType);
        }
 
        String n_id = entity.getN_id();
        if (n_id != null) {
            stmt.bindString(6, n_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoticeBean readEntity(Cursor cursor, int offset) {
        NoticeBean entity = new NoticeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // create_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // noticeType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // n_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoticeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNoticeType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setN_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoticeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoticeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoticeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
