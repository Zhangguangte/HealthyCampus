package com.example.HealthyCampus.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHAT_SESSION.
*/
public class ChatSessionDao extends AbstractDao<ChatSession, Long> {

    public static final String TABLENAME = "CHAT_SESSION";

    /**
     * Properties of entity ChatSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property LastMessage = new Property(2, String.class, "lastMessage", false, "LAST_MESSAGE");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Unread = new Property(4, Integer.class, "unread", false, "UNREAD");
        public final static Property LastTime = new Property(5, Long.class, "lastTime", false, "LAST_TIME");
        public final static Property TargetId = new Property(6, String.class, "targetId", false, "TARGET_ID");
    };


    public ChatSessionDao(DaoConfig config) {
        super(config);
    }
    
    public ChatSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_SESSION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'LAST_MESSAGE' TEXT," + // 2: lastMessage
                "'AVATAR' TEXT," + // 3: avatar
                "'UNREAD' INTEGER," + // 4: unread
                "'LAST_TIME' INTEGER," + // 5: lastTime
                "'TARGET_ID' TEXT UNIQUE );"); // 6: targetId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHAT_SESSION_TARGET_ID ON CHAT_SESSION" +
                " (TARGET_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_SESSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(3, lastMessage);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Integer unread = entity.getUnread();
        if (unread != null) {
            stmt.bindLong(5, unread);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(6, lastTime);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(7, targetId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatSession readEntity(Cursor cursor, int offset) {
        ChatSession entity = new ChatSession( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastMessage
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // unread
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // targetId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnread(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLastTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTargetId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatSession entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
